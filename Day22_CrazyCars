# from autobahn import Autobahn
from turtle import Screen
from crazycar import CrazyCar
from score_board import Scoreboard
import time
from random import randint
from player import Player

SIZE = (600, 400)

screen = Screen()
screen.setup(width=600, height=600)
screen.listen()
screen.tracer(0)
cars = []
score = Scoreboard()
player = Player()
screen.onkey(fun=player.dare, key="w")
# autobahn = Autobahn(title="Autobahn", size=SIZE, color="darkgray")

game_is_on = True
while game_is_on:
    for x in cars:
        if player.distance(car) < 50:
            game_is_on = False
    score.update()

    if player.ycor() > player.limit:
        score.score_increase()
        score.update()
        player.player_reset()
        car.increase_speed()
    for car in cars:
        car.keep_moving()
    chance = randint(1, 9)
    if chance == 4:
        car = CrazyCar()
        cars.append(car)
        cars.append(car)

    time.sleep(0.1)
    screen.update()

screen.exitonclick()
 ######################################################      score_board.py               ##############################################################
 from turtle import Turtle
FONT = ("Courier", 24, "normal")


class Scoreboard(Turtle):

    def __init__(self):
        super(Scoreboard, self).__init__()
        self.penup()
        self.hideturtle()
        self.score = 0
        self.goto(0,290)

    def update(self):
        self.clear()
        self.write(arg=f"Score {self.score}", font=FONT)

    def score_increase(self):
        self.score += 1
 ##############################################################         olayer.py               ###################################################
 from turtle import Turtle

STARTING_POSITION = (0, -280)
MOVE_DISTANCE = 10
FINISH_LINE_Y = 280


class Player(Turtle):

    def __init__(self):
        super().__init__()
        self.shape("turtle")
        self.color("red")
        self.penup()
        self.setheading(90)
        self.goto(STARTING_POSITION)
        self.limit = FINISH_LINE_Y

    def dare(self):
        self.fd(MOVE_DISTANCE)

    def player_reset(self):
        self.goto(STARTING_POSITION)
        
 ##################################################            crazy_car.py                     ###########################################################  
 from turtle import Turtle
from random import choice

COLORS = ['yellowgreen', 'turquoise', 'teal', 'sandybrown', 'palevioletred', 'olivedrab', 'indigo']
POSITION = (-150, -100, -50, 0, 50, 100, 150, 200, -200)
STARTING_MOVE_DISTANCE = 1
MOVE_INCREMENT = 20


class CrazyCar(Turtle):

    def __init__(self, ):
        super().__init__()
        self.shape("square")
        self.shapesize(stretch_len=2)
        self.color(choice(COLORS))
        self.penup()
        self.goto(x=-400, y=choice(POSITION))
        self.speed("fastest")
        self.speed_distance = STARTING_MOVE_DISTANCE

    def keep_moving(self):
        self.fd(self.speed_distance)

    def increase_speed(self):
        self.speed_distance += MOVE_INCREMENT

#############################################################        autobahn.py                          ##########################################
from turtle import Screen

SCREEN_SIZE = (800, 600)


class Autobahn:

    def __init__(self, title, size, color):
        self.color = color
        self.size = size
        self.title = title
        self.color = color
        self.create_autobahn()

    def create_autobahn(self):
        road = Screen()
        road.title(self.title)
        road.bgcolor(self.color)
        road.screensize(canvwidth=self.size[0], canvheight=self.size[1])
        road.tracer(0)
        road.listen()
        return road

    def update(self):
        self.update()

 
